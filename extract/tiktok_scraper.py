import asyncio
from datetime import datetime, timedelta

from manager import manager  # —ç—Ç–æ —Ç–≤–æ–π PlaywrightManager


def parse_relative_or_absolute_date(date_str):
    now = datetime.now()
    try:
        if "–¥–Ω." in date_str:
            days = int(re.search(r"(\d+)", date_str).group(1))
            return int((now - timedelta(days=days)).timestamp())
        elif "—á." in date_str:
            hours = int(re.search(r"(\d+)", date_str).group(1))
            return int((now - timedelta(hours=hours)).timestamp())
        elif "–Ω–µ–¥." in date_str:
            weeks = int(re.search(r"(\d+)", date_str).group(1))
            return int((now - timedelta(weeks=weeks)).timestamp())
    except:
        pass
    return None


async def get_all_video_urls(username: str) -> list[dict]:
    page = await manager.get_page()

    profile_url = f"https://www.tiktok.com/@{username}"
    await page.goto(profile_url)
    await page.wait_for_selector('a[href*="/video/"]', timeout=60000)

    previous_height = 0
    for _ in range(100):  # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∫—Ä–æ–ª–ª–æ–≤
        current_height = await page.evaluate('document.body.scrollHeight')
        if current_height == previous_height:
            break
        previous_height = current_height
        await page.evaluate('window.scrollTo(0, document.body.scrollHeight)')
        await page.wait_for_timeout(1500)

    anchors = await page.query_selector_all('a[href*="/video/"]')
    seen = set()
    results = []

    for anchor in anchors:
        href = await anchor.get_attribute("href")
        if not href or href in seen:
            continue
        seen.add(href)

        container = await anchor.evaluate_handle("el => el.closest('div[class*=\"DivItemContainerV2\"]')")
        if not container:
            continue

        # –ü—Ä–æ—Å–º–æ—Ç—Ä—ã
        views_el = await container.query_selector('strong[data-e2e="video-views"]')
        views = await views_el.inner_text() if views_el else None

        # –û–ø–∏—Å–∞–Ω–∏–µ
        img_el = await container.query_selector("img[alt]")
        description = await img_el.get_attribute("alt") if img_el else None

        # –î–∞—Ç–∞ (–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ preview, —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –≤–∏–¥–µ–æ, –º–æ–∂–Ω–æ –ø–æ–∑–∂–µ –¥–æ—Ä–∞—Å—à–∏—Ä–∏—Ç—å)
        date = None

        results.append({
            "url": href,
            "views": views,
            "description": description,
            "date": date,
            "author": username,
        })

    await page.close()
    return results


import re


async def get_video_metrics(page) -> dict:
    def extract_number(text):
        return int(re.search(r'\d+', text.replace(' ', '')).group()) if text else 0

    metrics = {"comments": 0, "likes": 0, "shares": 0}

    try:
        comments_text = await page.inner_text('strong[data-e2e="comment-count"]')
        likes_text = await page.inner_text('strong[data-e2e="like-count"]')
        shares_text = await page.inner_text('strong[data-e2e="share-count"]')

        metrics["comments"] = extract_number(comments_text)
        metrics["likes"] = extract_number(likes_text)
        metrics["shares"] = extract_number(shares_text)

        print(f"üìä –ú–µ—Ç—Ä–∏–∫–∏: üí¨ {metrics['comments']}  ‚ù§Ô∏è {metrics['likes']}  üîÅ {metrics['shares']}")

    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –º–µ—Ç—Ä–∏–∫–∏: {e}")

    return metrics

async def get_comments(video_url: str) -> list[dict]:
    print(f"üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: {video_url}")
    page = await manager.get_page()

    try:
        await page.goto(video_url)
        print("‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        print("üìä –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤–∏–¥–µ–æ...")
        metrics = await get_video_metrics(page)
        if metrics["comments"] == 0:
            print("0 –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
            return []
        print(f"üéØ –ú–µ—Ç—Ä–∏–∫–∏: {metrics}")
        target_count = int(metrics["comments"] * 0.9)
        print(f"üßÆ –¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å {target_count} –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")

        print("‚è≥ –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
        await page.wait_for_selector('div.css-13wx63w-DivCommentObjectWrapper', timeout=30000)
        print("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")

        comments = []
        seen_texts = set()
        prev_count = 0
        iteration = 0

        while True:
            iteration += 1
            print(f"üîÅ –°–∫—Ä–æ–ª–ª #{iteration}...")

            await page.mouse.wheel(0, 1000)
            await asyncio.sleep(5)

            # üïê –ñ–¥—ë–º –≤–æ–∑–º–æ–∂–Ω—ã–π –ª–æ–∞–¥–µ—Ä
            try:
                print("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–∞–¥–µ—Ä–∞...")
                await page.wait_for_selector("div.eps6g9r0", timeout=5000)
                print("‚è≥ –õ–æ–∞–¥–µ—Ä –Ω–∞–π–¥–µ–Ω, –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏...")
                await page.wait_for_selector("div.eps6g9r0", state="hidden", timeout=10000)
                print("‚úÖ –õ–æ–∞–¥–µ—Ä –∏—Å—á–µ–∑")
            except Exception:
                print("‚ö†Ô∏è –õ–æ–∞–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

            print("üîé –ò—â–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤...")
            elements = await page.query_selector_all('div.css-13wx63w-DivCommentObjectWrapper')
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")

            for el in elements:
                try:
                    # üí¨ –¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                    text_el = await el.query_selector('span[data-e2e^="comment-level-"] p')
                    text = (await text_el.inner_text()).strip() if text_el else None
                    if not text or text in seen_texts:
                        continue
                    seen_texts.add(text)

                    # üë§ –ê–≤—Ç–æ—Ä
                    author_el = await el.query_selector('div[data-e2e^="comment-username-"] a p')
                    author = (await author_el.inner_text()).strip() if author_el else None

                    # üïí –î–∞—Ç–∞
                    date = None
                    try:
                        date_span_elements = await el.query_selector_all(
                            'div.css-1lglotn-DivCommentSubContentWrapper span')
                        if date_span_elements:
                            date = (await date_span_elements[0].inner_text()).strip()
                    except Exception as date_err:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞—Ç—ã: {date_err}")

                    # ‚ù§Ô∏è –õ–∞–π–∫–∏
                    like_el = await el.query_selector('div.edeod5e0 span')
                    likes = (await like_el.inner_text()).strip() if like_el else "0"

                    comments.append({
                        "content": text,
                        "author": author,
                        "date": date,
                        "likes": likes,
                        "video_url": video_url,
                    })

                except Exception as el_err:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {el_err}")

            print(f"üí¨ –°–æ–±—Ä–∞–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {len(comments)} / {metrics['comments']}")

            # ‚úÖ –£—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞
            current_count = len(comments)
            if current_count >= target_count:
                print("üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
                break
            if current_count == prev_count:
                print("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü")
                break
            prev_count = current_count

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è {video_url}: {e}")
        print("üß© –í–æ–∑–º–æ–∂–Ω–æ, CAPTCHA –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É?")
        comments = []

    finally:
        print("üßπ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É")
        await page.close()

    print(f"‚úÖ –í—Å–µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ —Å–æ–±—Ä–∞–Ω–æ: {len(comments)}\n")
    return comments
