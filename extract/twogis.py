from typing import Any

import dateparser
from playwright.async_api import Locator, Page

from manager import manager

MAIN_BLOCK = "/html/body/div[2]/div/div/div[1]/div[1]/div[3]/div[2]/div/div/div/div/div[2]/div[2]/div/div[1]/div/div/div/div/div[2]"
items_count_path = "".join(
    (
        MAIN_BLOCK,
        "/div[{items_count_div_index}]/div[2]/div/div/div[1]/div[{item_index}]/h2/a/span",
    )
)


async def get_comment_items(comment_block: Locator) -> dict[str, Any]:
    print("üì¶ –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...")
    await comment_block.scroll_into_view_if_needed()

    comment_author = await comment_block.locator(
        "xpath=div/div/div/div[2]/span/span[1]/span"
    ).text_content()
    print(f"üë§ –ê–≤—Ç–æ—Ä: {comment_author}")

    text_div = await comment_block.locator("xpath=div").count()
    comment_text = await comment_block.locator(
        f"xpath=div[{text_div}]/div[2]/a"
    ).text_content()
    print(f"üí¨ –¢–µ–∫—Å—Ç: {comment_text}")

    commented_at = await comment_block.locator(
        "xpath=/div[1]/div/div[1]/div[2]/div"
    ).text_content()
    print(f"üïí –í—Ä–µ–º—è: {commented_at}")

    if commented_at:
        commented_at = dateparser.parse(commented_at, languages=["ru", "en"])

    return {
        "comment_author": comment_author or "",
        "comment_text": comment_text or "",
        "commented_at": commented_at,
    }


async def get_next_page(page: Page, block: Locator, loaded: int) -> int:
    print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
    await page.wait_for_timeout(1000)

    await (await block.element_handle()).evaluate(
        "el => el.scrollTo(0, 100000000000000000000)"
    )
    print("üìú –ü—Ä–æ–∫—Ä—É—Ç–∏–ª–∏ –≤–Ω–∏–∑")

    last = block.locator("xpath=div").nth(loaded - 1)
    await last.scroll_into_view_if_needed()
    await page.wait_for_timeout(500)

    new_loaded = await block.locator("xpath=div").count()
    print(f"üì¶ –ë—ã–ª–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {loaded}, –°—Ç–∞–ª–æ: {new_loaded}")
    await page.wait_for_timeout(500)
    return new_loaded


async def search_2gis_comments(url: str, max_comments_count: int = 20):
    print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: {url}")
    res = []
    parts = url.split("?")
    url = "".join((parts[0], "/tab/reviews?", parts[1] if len(parts) > 1 else ""))
    print(f"üß≠ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞: {url}")

    page = await manager.get_page()
    try:
        await page.goto(url)
        print("üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        block = page.locator(f"xpath={MAIN_BLOCK}")
        main_block_index = await block.locator("xpath=div").count()
        print(f"üî¢ –ò–Ω–¥–µ–∫—Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞: {main_block_index}")

        block = block.locator(f"xpath=div[{main_block_index}]")

        item_index = 0
        items_text = ""
        category_count = await page.locator(
            f"xpath={MAIN_BLOCK}/div[{main_block_index - 1}]/div[2]/div/div/div[1]/div"
        ).count()
        print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {category_count}")

        while category_count > item_index:
            item_index += 1
            it = "/".join(items_count_path.split("/")[:-1])
            items_text = await page.locator(
                f"xpath={it.format(items_count_div_index=main_block_index - 1, item_index=item_index)}"
            ).text_content()

            print(f"üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è {item_index}: {items_text}")
            if not items_text:
                print("‚ùå items_text –ø—É—Å—Ç–æ–π")
                return []
            if "–û—Ç–∑—ã–≤—ã" in items_text:
                span_count = await page.locator(
                    f"xpath={it.format(items_count_div_index=main_block_index - 1, item_index=item_index)}"
                ).locator("xpath=span").count()
                print(f"üìé span count: {span_count}")
                if span_count == 0:
                    print("‚ùå –û—Ç–∑—ã–≤—ã –µ—Å—Ç—å, –Ω–æ span –ø—É—Å—Ç–æ–π")
                    return []
                break
        else:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –±–ª–æ–∫–∏ –æ—Ç–∑—ã–≤–æ–≤")
            return []

        item_count_str = await page.locator(
            f"xpath={items_count_path.format(items_count_div_index=main_block_index - 1, item_index=item_index)}"
        ).text_content()
        items_count = int(c if (c := item_count_str) else 0)
        print(f"üî¢ –í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {items_count}")

        comments_count = 0
        i = 1
        loaded = await block.locator("xpath=div").count()
        print(f"üöö –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–∫–æ–≤: {loaded}")

        while comments_count < max_comments_count and items_count > comments_count:
            if i > loaded:
                print(f"üì• –ù—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ–ª—å—à–µ, i={i}, loaded={loaded}")
                loaded = await get_next_page(page=page, block=block, loaded=loaded)

            maybe_comment_block = block.locator(f"xpath=div[{i}]")
            div_count = await maybe_comment_block.locator(
                "xpath=div[1]/div[1]/div[1]/div[1]/div"
            ).count()
            print(f"üîé div[{i}]: –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤: {div_count}")

            if div_count > 0:
                comment = await get_comment_items(maybe_comment_block)
                comment["url"] = url
                res.append(comment)
                comments_count += 1
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {comments_count} / {max_comments_count}")

            i += 1
        print("‚úÖ –í—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:", res)
        return res
    finally:
        print("üßπ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        await page.close()
